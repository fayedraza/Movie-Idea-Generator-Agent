name: Pylint and Test Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    # No matrix strategy - only running on Python 3.10

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest pytest-cov pytest-html bc ansi2html
        # Install main package in development mode to ensure proper module imports
        if [ -f movie_idea_generator/pyproject.toml ]; then
          pip install -e ./movie_idea_generator[dev]
        fi
        if [ -f recommender_api/requirements.txt ]; then
          pip install -r recommender_api/requirements.txt
        fi
        # Install any additional requirements
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
    
    - name: Analyzing code with pylint
      run: |
        # Set minimum score threshold (1.0/10)
        THRESHOLD=1.0
        
        # Set absolute minimum score threshold (1.0/10) - code will fail CI if below this score
        CRITICAL_THRESHOLD=1.0
        
        # Create a report file directory
        mkdir -p pylint_reports
        
        echo "::group::Finding Python files to analyze"
        # Find Python files to analyze, excluding sensitive and cache directories
        FILES_TO_CHECK=$(find . -type f -name "*.py" ! -path "*/\.*" ! -path "*/venv/*" ! -path "*/.venv/*" ! -path "*/secrets.py" ! -path "*/__pycache__/*")
        echo "Files to check:"
        echo "$FILES_TO_CHECK"
        echo "::endgroup::"
        
        echo "::group::Running pylint analysis"
        # Run pylint with colorized output and capture exit code
        pylint --output-format=colorized $FILES_TO_CHECK > pylint_reports/pylint_colorized.txt 2>&1 || true
        PYLINT_EXIT_CODE=$?
        
        # Also create a plain text version
        pylint --output-format=text $FILES_TO_CHECK > pylint_reports/pylint_report.txt 2>&1 || true

        # Convert colorized output to HTML for better viewing in artifacts
        cat pylint_reports/pylint_colorized.txt | ansi2html > pylint_reports/pylint_report.html || true
        echo "::endgroup::"
        
        echo "::group::Pylint Results Summary"
        # Display summary information
        echo "----------------------------------------"
        echo "üîç PYLINT ANALYSIS RESULTS SUMMARY"
        echo "----------------------------------------"
        
        # Extract score from pylint output
        SCORE=$(grep -oP "Your code has been rated at \K[0-9.]+" pylint_reports/pylint_report.txt || echo "")
        
        # Get counts of different issue types
        ERROR_COUNT=$(grep -c "E:" pylint_reports/pylint_report.txt || echo "0")
        WARNING_COUNT=$(grep -c "W:" pylint_reports/pylint_report.txt || echo "0")
        CONVENTION_COUNT=$(grep -c "C:" pylint_reports/pylint_report.txt || echo "0")
        REFACTOR_COUNT=$(grep -c "R:" pylint_reports/pylint_report.txt || echo "0")
        
        # Show summary
        echo "Pylint exit code: $PYLINT_EXIT_CODE"
        if [ -n "$SCORE" ]; then
          echo "üìä Score: $SCORE/10.0"
        else
          echo "‚ùå Score: Not available (pylint might have failed)"
        fi
        
        echo "üìã Issue counts:"
        echo "  - Errors (E): $ERROR_COUNT"
        echo "  - Warnings (W): $WARNING_COUNT"
        echo "  - Conventions (C): $CONVENTION_COUNT"
        echo "  - Refactor suggestions (R): $REFACTOR_COUNT"
        echo "----------------------------------------"
        echo "::endgroup::"
        
        echo "::group::Top Issues (if any)"
        # Show the top issues from each category
        if [ "$ERROR_COUNT" -gt "0" ]; then
          echo "üö® TOP ERRORS:"
          grep "E:" pylint_reports/pylint_report.txt | head -n 5
          echo ""
        fi
        
        if [ "$WARNING_COUNT" -gt "0" ]; then
          echo "‚ö†Ô∏è TOP WARNINGS:"
          grep "W:" pylint_reports/pylint_report.txt | head -n 5
          echo ""
        fi
        
        if [ "$CONVENTION_COUNT" -gt "0" ]; then
          echo "üìù TOP CONVENTION ISSUES:"
          grep "C:" pylint_reports/pylint_report.txt | head -n 5
          echo ""
        fi
        echo "::endgroup::"
        
        # Check if score exists and if it's below critical threshold
        if [ -z "$SCORE" ]; then
          echo "‚ùå Failed to extract pylint score. Pylint might have failed."
          echo "Check the full output in the artifacts."
          exit 1
        fi
        
        # Check if the score is below threshold (must-fix)
        if (( $(echo "$SCORE < $THRESHOLD" | bc -l) )); then
          echo "::error::‚ùå CRITICAL: Pylint score $SCORE is below the threshold of $THRESHOLD"
          echo "::error::This code has critical quality issues that MUST be fixed before merging."
          exit 1
        else
          echo "‚úÖ Pylint score $SCORE meets or exceeds threshold $THRESHOLD"
        fi
    
    - name: Run tests for movie_idea_generator
      run: |
        if [ -d movie_idea_generator ]; then
          # Create test results directory
          mkdir -p movie_idea_generator/test_results

          cd movie_idea_generator
          echo "::group::Running tests for movie_idea_generator"
          echo "----------------------------------------"
          echo "üß™ TESTING MOVIE IDEA GENERATOR"
          echo "----------------------------------------"
          
          # Check if PYTHONPATH needs to be set for proper imports
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Run tests and capture output, generating both console output and HTML report
          python -m pytest tests/ -v --cov=src --html=test_results/report.html --self-contained-html > test_results/test_output.txt 2>&1
          TEST_EXIT_CODE=$?
          
          # Display test output for immediate visibility
          cat test_results/test_output.txt
          echo "::endgroup::"
          
          echo "::group::Test Results Summary"
          # Extract test summary information
          TOTAL_TESTS=$(grep -oP "collected \K[0-9]+" test_results/test_output.txt || echo "0")
          PASSED_TESTS=$(grep -c "PASSED" test_results/test_output.txt || echo "0")
          FAILED_TESTS=$(grep -c "FAILED" test_results/test_output.txt || echo "0")
          ERROR_TESTS=$(grep -c "ERROR" test_results/test_output.txt || echo "0")
          SKIPPED_TESTS=$(grep -c "SKIPPED" test_results/test_output.txt || echo "0")
          
          # Show the summary
          echo "----------------------------------------"
          echo "üß™ TEST RESULTS SUMMARY"
          echo "----------------------------------------"
          echo "üìä Test Statistics:"
          echo "  - Total Tests: $TOTAL_TESTS"
          echo "  - Passed: $PASSED_TESTS"
          echo "  - Failed: $FAILED_TESTS"
          echo "  - Errors: $ERROR_TESTS"
          echo "  - Skipped: $SKIPPED_TESTS"
          echo "  - Exit Code: $TEST_EXIT_CODE"
          echo "----------------------------------------"
          
          # Show failed tests if any
          if [ "$FAILED_TESTS" -gt "0" ] || [ "$ERROR_TESTS" -gt "0" ]; then
            echo "üö® FAILING TESTS:"
            grep -A 10 "FAILED" test_results/test_output.txt || true
            echo ""
          fi
          echo "::endgroup::"
          
          # Generate coverage report
          echo "::group::Coverage Report"
          python -m pytest --cov=src --cov-report=term
          echo "::endgroup::"
          
          # Exit with the pytest exit code to ensure workflow fails if tests fail
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "::error::‚ùå Tests for movie_idea_generator failed! See test results summary above."
            exit $TEST_EXIT_CODE
          else
            echo "‚úÖ All tests for movie_idea_generator passed!"
          fi
        else
          echo "::error::Directory movie_idea_generator not found!"
          exit 1
        fi
    
    - name: Run tests for recommender_api
      run: |
        if [ -d recommender_api ]; then
          # Create test results directory
          mkdir -p recommender_api/test_results

          cd recommender_api
          echo "::group::Running tests for recommender_api"
          echo "----------------------------------------"
          echo "üß™ TESTING RECOMMENDER API"
          echo "----------------------------------------"
          
          # Check if PYTHONPATH needs to be set for proper imports
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Run tests and capture output, generating both console output and HTML report
          python -m pytest tests/ -v --cov=src --html=test_results/report.html --self-contained-html > test_results/test_output.txt 2>&1
          TEST_EXIT_CODE=$?
          
          # Display test output for immediate visibility
          cat test_results/test_output.txt
          echo "::endgroup::"
          
          echo "::group::Test Results Summary"
          # Extract test summary information
          TOTAL_TESTS=$(grep -oP "collected \K[0-9]+" test_results/test_output.txt || echo "0")
          PASSED_TESTS=$(grep -c "PASSED" test_results/test_output.txt || echo "0")
          FAILED_TESTS=$(grep -c "FAILED" test_results/test_output.txt || echo "0")
          ERROR_TESTS=$(grep -c "ERROR" test_results/test_output.txt || echo "0")
          SKIPPED_TESTS=$(grep -c "SKIPPED" test_results/test_output.txt || echo "0")
          
          # Show the summary
          echo "----------------------------------------"
          echo "üß™ TEST RESULTS SUMMARY"
          echo "----------------------------------------"
          echo "üìä Test Statistics:"
          echo "  - Total Tests: $TOTAL_TESTS"
          echo "  - Passed: $PASSED_TESTS"
          echo "  - Failed: $FAILED_TESTS"
          echo "  - Errors: $ERROR_TESTS"
          echo "  - Skipped: $SKIPPED_TESTS"
          echo "  - Exit Code: $TEST_EXIT_CODE"
          echo "----------------------------------------"
          
          # Show failed tests if any
          if [ "$FAILED_TESTS" -gt "0" ] || [ "$ERROR_TESTS" -gt "0" ]; then
            echo "üö® FAILING TESTS:"
            grep -A 10 "FAILED" test_results/test_output.txt || true
            echo ""
          fi
          echo "::endgroup::"
          
          # Generate coverage report
          echo "::group::Coverage Report"
          python -m pytest --cov=src --cov-report=term
          echo "::endgroup::"
          
          # Exit with the pytest exit code to ensure workflow fails if tests fail
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "::error::‚ùå Tests for recommender_api failed! See test results summary above."
            exit $TEST_EXIT_CODE
          else
            echo "‚úÖ All tests for recommender_api passed!"
          fi
        else
          echo "::error::Directory recommender_api not found!"
          exit 1
        fi
    
    - name: Upload test and lint reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-and-lint-reports
        path: |
          pylint_reports/
          **/test_results/
          **/coverage.xml
          **/.coverage
