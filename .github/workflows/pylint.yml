name: Pylint and Test Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    # No matrix strategy - only running on Python 3.10

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest pytest-cov bc
        # Install main package in development mode to ensure proper module imports
        if [ -f movie_idea_generator/pyproject.toml ]; then
          pip install -e ./movie_idea_generator[dev]
        fi
        if [ -f recommender_api/requirements.txt ]; then
          pip install -r recommender_api/requirements.txt
        fi
        # Install any additional requirements
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
    
    - name: Analyzing code with pylint
      run: |
        # Set minimum score threshold (8.0/10)
        THRESHOLD=8.0
        
        # Create a report file
        mkdir -p pylint_reports
        
        # Run pylint and capture the output and score
        # Exclude files containing secrets, virtual environments, and cache directories
        echo "Running pylint analysis on Python files..."
        FILES_TO_CHECK=$(find . -type f -name "*.py" ! -path "*/\.*" ! -path "*/venv/*" ! -path "*/.venv/*" ! -path "*/secrets.py" ! -path "*/__pycache__/*")
        
        # Display what files will be checked
        echo "Checking the following files:"
        echo "$FILES_TO_CHECK"
        
        # Run pylint on the files
        PYLINT_OUTPUT=$(pylint --output-format=text $FILES_TO_CHECK 2>&1)
        PYLINT_EXIT_CODE=$?
        
        # Save the output to a report file
        echo "$PYLINT_OUTPUT" > pylint_reports/pylint_report.txt
        
        # Extract score from pylint output
        SCORE=$(echo "$PYLINT_OUTPUT" | grep -oP "Your code has been rated at \K[0-9.]+")
        
        # Display pylint output for debugging
        echo "Pylint output:"
        echo "$PYLINT_OUTPUT"
        
        # Interpret pylint exit code
        echo "Pylint exit code: $PYLINT_EXIT_CODE"
        case $PYLINT_EXIT_CODE in
          0)
            echo "Pylint completed successfully with no issues."
            ;;
          4)
            echo "Pylint found fatal errors in your code (syntax errors, etc.)."
            exit 1
            ;;
          8)
            echo "Pylint found errors in your code (likely bugs, API misuse, etc.)."
            exit 1
            ;;
          16)
            echo "Pylint found warnings in your code (stylistic issues, minor problems)."
            ;;
          32)
            echo "Pylint found convention issues in your code (coding standards violations)."
            ;;
          *)
            echo "Pylint exited with code $PYLINT_EXIT_CODE"
            ;;
        esac
        
        if [ -z "$SCORE" ]; then
          echo "Failed to extract pylint score. Pylint might have failed."
          exit 1
        fi
        
        if (( $(echo "$SCORE < $THRESHOLD" | bc -l) )); then
          echo "Pylint score $SCORE is below threshold $THRESHOLD"
          echo "Please fix the issues reported by pylint (see logs or artifacts)."
          exit 1
        else
          echo "Pylint score $SCORE meets or exceeds threshold $THRESHOLD"
        fi
    
    - name: Run tests for movie_idea_generator
      run: |
        if [ -d movie_idea_generator ]; then
          cd movie_idea_generator
          # Check if PYTHONPATH needs to be set for proper imports
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          # Run tests with coverage and fail if tests fail
          python -m pytest tests/ -v --cov=src
        else
          echo "Directory movie_idea_generator not found!"
          exit 1
        fi
    
    - name: Run tests for recommender_api
      run: |
        if [ -d recommender_api ]; then
          cd recommender_api
          # Check if PYTHONPATH needs to be set for proper imports
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          # Run tests with coverage and fail if tests fail
          python -m pytest tests/ -v --cov=src
        else
          echo "Directory recommender_api not found!"
          exit 1
        fi
    
    - name: Upload test and lint reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-and-lint-reports
        path: |
          pylint_reports/
          **/coverage.xml
          **/.coverage
